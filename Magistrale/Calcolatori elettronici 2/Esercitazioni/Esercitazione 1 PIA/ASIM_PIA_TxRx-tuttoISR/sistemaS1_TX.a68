*************************************************************************************************
*Il programma serve a provare una semplice configurazione costituita da due 
*sistemi S1 ed S2 dotati entrambi di un processore M68000, una ROM di 8K (addr $0-$1FFF), 
*una RAM di 10K (addr $8000-$A7FF) e un device parallelo PIA mappato a $2004.
*I due PIA sono interconnessi tra loro e mediante un protocollo di handshaking consentono ai
*due sistemi di scambiarsi un messaggio. In particolare, il sistema S1 trasferisce un vettore di N caratteri
*verso il sistema S2 sul porto parallelo. Il messaggio si trova in un'area di memoria del sistema S1
*e viene salvato in una ulteriore area di memoria nel sistema S2.
*
*Questo driver serve per la programmazione del sistema S1, che effettua il trasferimento sotto interrupt.
*
*************************************************************************************************
*	   PIA1		    PIA2
*	______	 _______
*	   CA1	|<---------|   CB2
*	   CA2	|--------->|   CB1
*	______|<==== |_______
*	   CB1	|<---------|   CA2
*	   CB2	|--------->|   CA1
*	______| ====>|_______
*
************************************************************************************************

	
	

************************************************************
**********AREA DATI**************************************
	ORG	$8000
MSG	DC.B	1,2,3,4,5,6
DIM	DC.B	6
COUNT		DC.B	0


***********************************************************
***********AREA MAIN*********************************	
	ORG    $8200

PIADB	EQU    $2006	;indirizzo di PIA-B dato, usato in output 
PIACB	EQU    $2007	;indirizzo di PIA-B controllo

MAIN	JSR    DVBOUT	;inizializza PIA porto B in output

	MOVEA.L	#PIACB,A1	;indirizzo registro di controllo CRB
	MOVEA.L	#PIADB,A2	;indirizzo registro PRB
	MOVEA.L	#MSG,A0	;indirizzo area messaggio

* invio primo carattere:	
INVIO1	MOVE.B	(A2),D1            ;lettura fittizia da PRB => serve per azzerare CRB7 poichè in generale non sappiamo se la macchina è in reset
	MOVE.B	(A0),D1		;carattere corrente da trasferire in D2;
	MOVE.B	D1,(A2)		;dato su bus di PIA porto B: dopo la scrittura di PRB, CB2 si abbassa
*					;ciò fa abbassare CA1 sulla porta gemella dell'altro sistema generando 
*					;un'interruzione che coincide con il segnale DATA READY

	MOVE.B	#1,COUNT

	MOVE.W	SR,D0	;legge il registro di stato
	ANDI.W	#$D8FF,D0 ;maschera per reg stato (stato utente, int abilitati)
	MOVE.W	D0,SR	;pone liv int a 000


LOOP  	JMP LOOP	;ciclo caldo dove il processore attende interrupt		



*********************************************************************************************************
*INIZIALIZZAZIONE DELLA PIA: PORTO B	
*	CRB |0 |0 |1 0 0 |1 |0 1|
*	                   |	    |    |_____Controllo CB1: interruzioni abilitate su IRQB, CB1 sensibile a fronte 1->0
*		       |	    |		
*		       |	    |________Accesso a DRB: il prossimo accesso ad indirizzo pari è per PRB
*		       |____________ Controllo CB2: CRB5=1 significa linea di uscita, con gli altri due bit a 00 diventa alto su fronte 
*                                             		attivo di CB1 e si riabbassa a seguito a scrittura su PRB
*
*	DRB=1 => PORTO B PORTO DI USCITA
*
***********************************************************************************************************
DVBOUT	MOVE.B	#0,PIACB		;seleziona il registro direzione di PIA porto B 
	MOVE.B	#$FF,PIADB	  		;accede a DRB e pone DRA=1 : le linee di B sono linee di output	
	MOVE.B	#%00100101,PIACB   	;imposta il registro di controllo come indicato sopra
*								;i bit CRB7 e CRB6 sono a sola lettura	
	RTS


*******************************************************************************************************
*La pia-A dell'altro sistema ha appena letto un carattere e scatena l'handshake che genera una interrupt
*su questo sistema: la ISR invia il prossimo carattere prelevandolo dalla memoria se ce ne sono ancora
*da trsmettere.
*ISR a $8800 associata all' interrupt di liv. 4  #vect 28  mappato a $70 della ROM
********************************************************************************************************	
	
	ORG $8800		

INT4    	MOVE.L	A1,-(A7)		;salvataggio registri
	MOVE.L	A0,-(A7)
	MOVE.L	D0,-(A7)
	MOVE.L	D1,-(A7)
	MOVE.L	D2,-(A7)

	MOVEA.L	#PIADB,A1
	MOVEA.L	#MSG,A0	;indirizzo area di salvataggio
	MOVE.B	DIM,D0	;dim del messaggio
	MOVE.B	COUNT,D1	;contatore corrente degli elementi ricevuti

	CMP.B	D1,D0
	BEQ	FINE
	
INVIO	MOVE.B	(A1),D2            ;lettura fittizia da PRB => serve per azzerare CRB7 dopo il primo carattere, altrimenti resta settato con l'ack
	MOVE.B	(A0,D1),(A1)	;carattere corrente da trasferire in D2;
*					;dato su bus di PIA porto B: dopo la scrittura di PRB, CB2 si abbassa
				
	ADD.B	#1,D1			;aggiorno il contatore degli elementi trasmessi
	MOVE.B	D1,COUNT

FINE	MOVE.L  (A7)+,D2		;ripristino registri 
	MOVE.L  (A7)+,D1
	MOVE.L  (A7)+,D0	
	MOVE.L  (A7)+,A0
	MOVE.L  (A7)+,A1
	
	RTE




	END	MAIN








































