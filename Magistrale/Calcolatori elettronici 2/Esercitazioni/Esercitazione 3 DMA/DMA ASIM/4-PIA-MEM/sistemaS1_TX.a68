*************************************************************************************************
*Il programma serve a provare una semplice configurazione costituita da due 
*sistemi S1 ed S2 dotati entrambi di un processore M68000, una ROM di 8K (addr $0-$1FFF), 
*una RAM di 10K (addr $8000-$A7FF) e un device parallelo PIA mappato a $2004.
*I due PIA sono interconnessi tra loro e mediante un protocollo di handshaking consentono ai
*due sistemi di scambiarsi un messaggio. In particolare, il sistema S1 trasferisce un vettore di N caratteri
*verso il sistema S2 sul porto parallelo. Il messaggio si trova in un'area di memoria del sistema S1
*e viene salvato in una ulteriore area di memoria nel sistema S2.
*
*Questo driver serve per la programmazione del sistema S1, che effettua il trasferimento con un semplice ciclo.
*
*************************************************************************************************
*	   PIA1		    PIA2
*	______	 _______
*	   CA1	|<---------|   CB2
*	   CA2	|--------->|   CB1
*	______|<==== |_______
*	   CB1	|<---------|   CA2
*	   CB2	|--------->|   CA1
*	______| ====>|_______
*
************************************************************************************************

	
	

************************************************************
**********AREA DATI**************************************
	ORG	$8000
MSG	DC.B	1,2,3,4,5,6
DIM	DC.B	6


***********************************************************
***********AREA MAIN*********************************	
	ORG    $8200

PIADB	EQU    $2006	;indirizzo di PIA-B dato, usato in output 
PIACB	EQU    $2007	;indirizzo di PIA-B controllo

MAIN	JSR    DVBOUT	;inizializza PIA porto B in output

	MOVEA.L	#PIACB,A1	;indirizzo registro di controllo CRB
	MOVEA.L	#PIADB,A2	;indirizzo registro PRB
	MOVEA.L	#MSG,A0	;indirizzo area messaggio
	MOVE.B	DIM,D0	;dim del messaggio
	
	CLR	D1	;appoggio
	MOVE	D0,D2	;contatore elementi trasmessi

* ATTENZIONE: non usiamo l'handshaking qui perchè il DMA non possiede i segnali per "parlare" direttamente con la PIA
*questo significa che non controlleremo il bit CRB7 prima di inviare un nuovo dato e non faremo la lettura fittizia, ma scriveremo semplicemente
*nel registro PRB

INVIO	MOVE.B	(A0)+,D1	;carattere corrente da trasferire in D2;
	MOVE.B	D1,(A2)		;dato su bus di PIA porto B
	ADD.B		#-1,D2		;incremento contatore elementi trasmessi
	BNE	INVIO


LOOP  	JMP LOOP	;ciclo caldo dove il processore attende interrupt		



*********************************************************************************************************
*INIZIALIZZAZIONE DELLA PIA: PORTO B	
*	CRB |0 |0 |1 0 0 |1 |0 0|
*	           |	  |   |____Controllo CB1: interruzioni disabilitate su IRQB, CB1 sensibile a fronte 1->0
*		       |	  |		
*		       |	  |________Accesso a DRB: il prossimo accesso ad indirizzo pari è per PRB
*		       |_______________Controllo CB2: linea di uscita, con gli altri due bit a 00 diventa alto su fronte 
*                                             attivo di CB1 e si riabbassa a seguito a scrittura su PRB
*
*	DRB=1 => PORTO B PORTO DI USCITA
*
***********************************************************************************************************
DVBOUT	MOVE.B	#0,PIACB		;seleziona il registro direzione di PIA porto B 
	MOVE.B	#$FF,PIADB	  		;accede a DRB e pone DRA=1 : le linee di B sono linee di output	
	MOVE.B	#%00100100,PIACB   	;imposta il registro di controllo come indicato sopra
*								;i bit CRB7 e CRB6 sono a sola lettura	
	RTS



	END	MAIN








































